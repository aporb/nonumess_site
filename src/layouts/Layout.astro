---
interface Props {
  title: string;
  description?: string;
}

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

const { title, description = "NoNuMess provides professional home organization services in Houston, TX. Transform your space with our decluttering and organization solutions." } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://nonumess.com/" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/images/hero-bg.jpg" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://nonumess.com/" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/images/hero-bg.jpg" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <!-- Skip to content link for accessibility -->
    <a href="#main-content" class="skip-to-content">Skip to content</a>
    
    <div class="site-wrapper">
      <Header />
      
      <main id="main-content">
        <slot />
      </main>
      
      <Footer />
    </div>
    
    <div class="theme-toggle">
      <button id="theme-toggle-btn" aria-label="Toggle dark mode">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sun-icon">
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="moon-icon">
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
      </button>
    </div>
    
    <script>
      // Theme toggle functionality
      const themeToggleBtn = document.getElementById('theme-toggle-btn');
      const htmlElement = document.documentElement;
      
      // Check for saved theme preference or use preferred color scheme
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Set initial theme
      if (savedTheme) {
        htmlElement.setAttribute('data-theme', savedTheme);
      } else if (prefersDark) {
        htmlElement.setAttribute('data-theme', 'dark');
      }
      
      // Update button appearance based on current theme
      function updateThemeToggle() {
        const currentTheme = htmlElement.getAttribute('data-theme');
        if (currentTheme === 'dark') {
          themeToggleBtn.classList.add('dark-mode');
        } else {
          themeToggleBtn.classList.remove('dark-mode');
        }
      }
      
      // Initialize toggle button state
      updateThemeToggle();
      
      // Toggle theme when button is clicked
      if (themeToggleBtn) {
        themeToggleBtn.addEventListener('click', () => {
          const currentTheme = htmlElement.getAttribute('data-theme');
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          
          htmlElement.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          updateThemeToggle();
        });
      }
      
      // Smooth scroll functionality for anchor links
      document.addEventListener('DOMContentLoaded', () => {
        const scrollToSection = (e) => {
          const href = e.currentTarget.getAttribute('href');
          
          if (href && href.startsWith('#')) {
            e.preventDefault();
            const targetId = href.substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
              // Get header height for offset
              const headerHeight = document.querySelector('.header')?.offsetHeight || 0;
              const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight;
              
              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
              });
              
              // Update URL without page reload
              history.pushState(null, null, href);
            }
          }
        };
        
        // Apply to all anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', scrollToSection);
        });
        
        // Add animation classes on scroll
        const animateOnScroll = () => {
          const elements = document.querySelectorAll('.section-title, .section-subtitle, .card');
          
          elements.forEach(element => {
            const elementTop = element.getBoundingClientRect().top;
            const windowHeight = window.innerHeight;
            
            if (elementTop < windowHeight * 0.9) {
              element.classList.add('fade-in');
            }
          });
        };
        
        // Run once on page load
        setTimeout(animateOnScroll, 100);
        
        // Add event listener for scroll
        window.addEventListener('scroll', animateOnScroll);
      });
    </script>
    
    <style is:global>
      @import "../styles/global.css";
      
      .theme-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
      }
      
      #theme-toggle-btn {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: var(--color-white);
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-md);
        transition: all 0.3s ease;
      }
      
      #theme-toggle-btn:hover {
        transform: translateY(-3px);
        box-shadow: var(--shadow-lg);
      }
      
      #theme-toggle-btn .sun-icon {
        display: none;
      }
      
      #theme-toggle-btn .moon-icon {
        display: block;
      }
      
      #theme-toggle-btn.dark-mode .sun-icon {
        display: block;
      }<boltAction type="file" filePath="src/layouts/Layout.astro">      
      #theme-toggle-btn.dark-mode .moon-icon {
        display: none;
      }
      
      @media (max-width: 768px) {
        .theme-toggle {
          bottom: 15px;
          right: 15px;
        }
        
        #theme-toggle-btn {
          width: 40px;
          height: 40px;
        }
      }
    </style>
  </body>
</html>
